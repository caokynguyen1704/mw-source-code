//ver200 es stdmtl_Main

uniform float g_shadowdensity;
uniform float g_fTime;
uniform vec3 g_EyePos;
uniform vec3 g_EyePosModel;
uniform vec3 g_LightSCMPos;
uniform vec4 g_ShadowCenter;
uniform mat4 g_depthproj;
uniform mat4 g_referencepoint;
uniform vec3 g_warfogparameter;
uniform vec3 g_warfogcolor;
uniform vec4 g_AmbientLight;
uniform vec4 g_DistFogColor;
uniform vec4 g_FogParam;
uniform vec4 g_BoneTM[210];
uniform mat4 g_World;
uniform mat4 g_WorldView;
uniform mat4 g_WorldViewProj;
uniform float g_ModelTransparent;
uniform vec3 g_SelfPower;
uniform float g_SpecPower;
uniform vec3 g_SunDirection;
uniform vec4 g_SkyLightColor;
uniform vec4 g_TorchLightColor;
uniform vec4 g_InstanceData;
uniform vec4 g_RimColor;
uniform float g_RimPower;
uniform float g_TransU;
uniform float g_TransV;
uniform float g_ScaleU;
uniform float g_ScaleV;
uniform float g_RotUV;
uniform vec3 g_OverlayColor;


attribute vec4 in_var_POSITION;
attribute vec3 in_var_NORMAL;
attribute vec2 in_var_TEXCOORD0;
attribute vec4 in_var_BLENDWEIGHT;
attribute vec4 in_var_BLENDINDICES;
attribute vec2 in_var_TEXCOORD1;
varying vec4 varying_COLOR0;
varying vec4 varying_TEXCOORD0;
varying vec2 varying_TEXCOORD2;
varying vec2 varying_TEXCOORD3;
varying vec3 varying_TEXCOORD4;
varying vec3 varying_TEXCOORD5;

vec4 _66;

void main()
{
    float _74 = dot(in_var_POSITION, g_BoneTM[0]);
    float _77 = dot(in_var_POSITION, g_BoneTM[1]);
    float _80 = dot(in_var_POSITION, g_BoneTM[2]);
    vec4 _83 = vec4(_74, _77, _80, 1.0);
    float _110 = g_InstanceData.x * g_SkyLightColor.w;
    vec3 _128 = ((max(g_SkyLightColor.xyz * _110, g_TorchLightColor.xyz * g_InstanceData.y) * 1.0) + (g_AmbientLight.xyz * (1.0 - _110))) + vec3(0.20000000298023223876953125);
    vec4 _130 = vec4(_128.x, _128.y, _128.z, _66.w);
    _130.w = 0.0;
    float _146 = radians(g_RotUV);
    vec2 _153 = (in_var_TEXCOORD1 - vec2(0.5)) * vec2(g_ScaleU, g_ScaleV);
    float _154 = _153.x;
    float _155 = cos(_146);
    float _157 = _153.y;
    float _158 = sin(_146);
    gl_Position = _83 * g_WorldViewProj;
    varying_COLOR0 = _130;
    varying_TEXCOORD0 = vec4(in_var_TEXCOORD0.x, in_var_TEXCOORD0.y, _66.z, _66.w);
    varying_TEXCOORD2 = clamp(vec2((g_FogParam.y - distance(vec3(_74, _77, _80), g_EyePosModel)) / (g_FogParam.y - g_FogParam.x), 1.0), vec2(0.0), vec2(1.0));
    varying_TEXCOORD3 = (vec2((_154 * _155) + (_157 * _158), ((-_154) * _158) + (_157 * _155)) + vec2(0.5)) + vec2(g_TransU, g_TransV);
    varying_TEXCOORD4 = normalize(normalize(normalize(in_var_NORMAL) * mat3(g_World[0].xyz, g_World[1].xyz, g_World[2].xyz)));
    varying_TEXCOORD5 = normalize(g_EyePos - (_83 * g_World).xyz);
}

