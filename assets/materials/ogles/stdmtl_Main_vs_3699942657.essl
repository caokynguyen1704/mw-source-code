//ver200 es stdmtl_Main

uniform float g_shadowdensity;
uniform float g_fTime;
uniform vec3 g_EyePos;
uniform vec3 g_EyePosModel;
uniform vec3 g_LightSCMPos;
uniform vec4 g_ShadowCenter;
uniform mat4 g_depthproj;
uniform mat4 g_referencepoint;
uniform vec3 g_warfogparameter;
uniform vec3 g_warfogcolor;
uniform vec4 g_AmbientLight;
uniform vec4 g_DistFogColor;
uniform vec4 g_FogParam;
uniform mat4 g_World;
uniform mat4 g_WorldView;
uniform mat4 g_WorldViewProj;
uniform float g_ModelTransparent;
uniform vec3 g_SelfPower;
uniform float g_SpecPower;
uniform vec3 g_SunDirection;
uniform vec4 g_SkyLightColor;
uniform vec4 g_TorchLightColor;
uniform vec4 g_InstanceData;
uniform vec4 g_RimColor;
uniform float g_RimPower;
uniform float g_TransU;
uniform float g_TransV;
uniform float g_ScaleU;
uniform float g_ScaleV;
uniform float g_RotUV;
uniform vec3 g_MaskColor;


attribute vec4 in_var_POSITION;
attribute vec3 in_var_NORMAL;
attribute vec2 in_var_TEXCOORD0;
attribute vec2 in_var_TEXCOORD1;
varying vec4 varying_COLOR0;
varying vec4 varying_TEXCOORD0;
varying vec2 varying_TEXCOORD2;
varying vec2 varying_TEXCOORD3;
varying vec3 varying_TEXCOORD4;
varying vec3 varying_TEXCOORD5;

vec4 _60;

void main()
{
    vec4 _71 = vec4(in_var_POSITION.xyz, 1.0);
    float _98 = g_InstanceData.x * g_SkyLightColor.w;
    vec3 _116 = ((max(g_SkyLightColor.xyz * _98, g_TorchLightColor.xyz * g_InstanceData.y) * 1.0) + (g_AmbientLight.xyz * (1.0 - _98))) + vec3(0.20000000298023223876953125);
    vec4 _118 = vec4(_116.x, _116.y, _116.z, _60.w);
    _118.w = 0.0;
    float _134 = radians(g_RotUV);
    vec2 _141 = (in_var_TEXCOORD1 - vec2(0.5)) * vec2(g_ScaleU, g_ScaleV);
    float _142 = _141.x;
    float _143 = cos(_134);
    float _145 = _141.y;
    float _146 = sin(_134);
    gl_Position = _71 * g_WorldViewProj;
    varying_COLOR0 = _118;
    varying_TEXCOORD0 = vec4(in_var_TEXCOORD0.x, in_var_TEXCOORD0.y, _60.z, _60.w);
    varying_TEXCOORD2 = clamp(vec2((g_FogParam.y - distance(in_var_POSITION.xyz, g_EyePosModel)) / (g_FogParam.y - g_FogParam.x), 1.0), vec2(0.0), vec2(1.0));
    varying_TEXCOORD3 = (vec2((_142 * _143) + (_145 * _146), ((-_142) * _146) + (_145 * _143)) + vec2(0.5)) + vec2(g_TransU, g_TransV);
    varying_TEXCOORD4 = normalize(normalize(normalize(in_var_NORMAL) * mat3(g_World[0].xyz, g_World[1].xyz, g_World[2].xyz)));
    varying_TEXCOORD5 = normalize(g_EyePos - (_71 * g_World).xyz);
}

